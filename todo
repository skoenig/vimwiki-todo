#!/usr/bin/env bash

# === HEAVY LIFTING ===
shopt -s extglob extquote

export TODO_DIR=$( dirname $( readlink -e $0 ))
export TODO_FILE="$TODO_DIR/todo.md"
export DONE_FILE="$TODO_DIR/done.md"

# defaults if not yet defined
TODOTXT_VERBOSE=${TODOTXT_VERBOSE:-0}
TODOTXT_SORT_COMMAND=${TODOTXT_SORT_COMMAND:-env LC_COLLATE=C sort -f -k2}
TODOTXT_FINAL_FILTER=${TODOTXT_FINAL_FILTER:-cat}
TODOTXT_DISABLE_FILTER=${TODOTXT_DISABLE_FILTER:-}

# Export all TODOTXT_* variables
export "${!TODOTXT_@}"

usage() {
cat <<- EOF
$(basename $0) [ACTION] [OPTION]

ACTIONS:
add       : Add a single task to TODO_FILE
list | ls : List all tasks in TODO_FILE
edit      : Open TODO_FILE with your default editor
archive   : Move all done tasks from TODO_FILE to DONE_FILE and remove blank lines
context   : Show todo items group by context
date      : Show todo items group by date
nodate    : Show todo items group by date without date
past      : Show todo items group by date from today to past
future    : Show todo items group by date from today to future
today     : Show todo items group by date only today
yesterday : Show todo items group by date from today to yesterday
tomorrow  : Show todo items group by date from today to tomorrow
EOF
    exit
}

ACTION=${1}
[ -z "$ACTION" ] && usage
shift  ## Was ACTION, new $1 is first search term

die() {
    echo "$*"
    exit 1
}

getPrefix() {
    # Parameters:    $1: todo file; empty means $TODO_FILE.
    # Returns:       Uppercase FILE prefix to be used in place of "TODO:" where
    #                a different todo file can be specified.
    local base
    base=$(basename "${1:-$TODO_FILE}")
    echo "${base%%.[^.]*}" | tr '[:lower:]' '[:upper:]'
}

_addto() {
    file="$1"
    input="$2"

    echo "- [ ] $input" >> "$file"
    if [ "$TODOTXT_VERBOSE" -gt 0 ]; then
        TASKNUM=$(sed -n '$ =' "$file")
        echo "$TASKNUM $input"
        echo "$file: $TASKNUM added."
    fi
}

shellquote() {
    typeset -r qq=\'; printf %s\\n "'${1//\'/${qq}\\${qq}${qq}}'";
}

filtercommand() {
    filter=${1:-}
    shift
    post_filter=${1:-}
    shift

    for search_term
    do
        ## See if the first character of $search_term is a dash
        if [ "${search_term:0:1}" != '-' ]
        then
            ## First character isn't a dash: hide lines that don't match
            ## this $search_term
            filter="${filter:-}${filter:+ | }grep -i $(shellquote "$search_term")"
        else
            ## First character is a dash: hide lines that match this
            ## $search_term
            #
            ## Remove the first character (-) before adding to our filter command
            filter="${filter:-}${filter:+ | }grep -v -i $(shellquote "${search_term:1}")"
        fi
    done

    [ -n "$post_filter" ] && {
        filter="${filter:-}${filter:+ | }${post_filter:-}"
    }

    printf %s "$filter"
}

_list() {
    local FILE="$1"
    ## If the file starts with a "/" use absolute path. Otherwise,
    ## try to find it in either $TODO_DIR or using a relative path
    if [ "${1:0:1}" == / ]; then
        ## Absolute path
        src="$FILE"
    elif [ -f "$TODO_DIR/$FILE" ]; then
        ## Path relative to todo.sh directory
        src="$TODO_DIR/$FILE"
    elif [ -f "$FILE" ]; then
        ## Path relative to current working directory
        src="$FILE"
    elif [ -f "$TODO_DIR/${FILE}.md" ]; then
        ## Path relative to todo.sh directory, missing file extension
        src="$TODO_DIR/${FILE}.md"
    else
        die "TODO: File $FILE does not exist."
    fi

    ## Get our search arguments, if any
    shift ## was file name, new $1 is first search term

    _format "$src" "$@"

    if [ $TODOTXT_VERBOSE -gt 0 ]; then
        echo "---"
        echo "$(getPrefix "$src"): ${NUMTASKS:-0} of ${TOTALTASKS:-0} tasks shown"
    fi
}

_format() {
    # Parameters:    $1: todo input file; when empty formats stdin
    # Precondition:  None
    # Postcondition: $NUMTASKS and $TOTALTASKS contain statistics (unless $TODOTXT_VERBOSE=0).

    FILE=$1
    shift

    ## Run the filter command,
    ## then sort and mangle output some more
    if [[ $TODOTXT_DISABLE_FILTER = 1 ]]; then
        TODOTXT_FINAL_FILTER="cat"
    fi
    items=$(
        if [ "$FILE" ]; then
            grep '^- ' "$FILE"
        else
            grep '^- '
        fi
    )

    ## Build and apply the filter.
    filter_command=$(filtercommand "${pre_filter_command:-}" "${post_filter_command:-}" "$@")
    if [ "${filter_command}" ]; then
        filtered_items=$(echo -n "$items" | eval "${filter_command}")
    else
        filtered_items=$items
    fi
    filtered_items=$(
        echo -n "$filtered_items"                              \
        | eval ${TODOTXT_SORT_COMMAND}                         \
        | eval ${TODOTXT_FINAL_FILTER}                         \
    )
    [ "$filtered_items" ] && echo "$filtered_items"

    if [ "$TODOTXT_VERBOSE" -gt 0 ]; then
        NUMTASKS=$( echo -n "$filtered_items" | sed -n '$ =' )
        TOTALTASKS=$( echo -n "$items" | sed -n '$ =' )
    fi
    if [ "$TODOTXT_VERBOSE" -gt 1 ]; then
        echo "TODO DEBUG: Filter Command was: ${filter_command:-cat}"
    fi
}

context_view() {
    # Show contexts in alphabetical order
    echo "# Contexts"
    echo ""

    # Find all contexts and sort
    CONTEXTS=$(grep -o '[^  ]*:[^  ]\+' "$TODO_FILE" | grep '^:' | sort -u | sed 's/://g')

    # For each context show header and the list of todo items
    for context in $CONTEXTS ; do
        # Use core output function, does numbering and colouring for us
        CONTEXT_LIST=$(_list "$TODO_FILE" ":$context\b" "$@" | sed 's/(^:|\ *:)[^[:cntrl:] ]\ */ /g')
        if [[ -n "${CONTEXT_LIST}" ]]; then
            echo "## $context"
            echo "${CONTEXT_LIST}"
            echo ""
        fi
    done
}

date_view() {
    #  Show dates in alphabetical order
    echo "# Dates"
    echo ""

    #  Find all dates and sort
    DATES=$(grep -o '[^  ]*t:[^  ]\+' "$TODO_FILE" | grep '^t:' | sort -u | sed 's/^t://g')

    #  Get option
    option=$1
    shift

    #  Get today
    today=$(date -d $(date +%Y-%m-%d) +%s)

    #  For each date show header and the list of todo items
    for date in $DATES ; do
        # Check it is a valid date or not
        date_check $option $today $date
        show="$?"
        if [[ $show -eq 0 ]]; then
            # If it is not a valid date, just do nothing
            continue
        fi

        #  Use core output function, does numbering and colouring for us
        DATE_LIST=$(_list "$TODO_FILE" "t:$date" "$@" | sed 's/\(^t:\|\ *t:\)[0-9-]*\ */ /g')
        if [ -n "${DATE_LIST}" ]; then
            echo  "## $date"
            echo  "${DATE_LIST}"
            echo  ""
        fi
    done

    #  Show todo items not associated to a date
    if [[ "$option" = "nodate" ]]; then
        DATE_LIST=$(_list "$TODO_FILE" "$@" | grep -v "t:[0-9-]*")
        if [ -n "${DATE_LIST}" ]; then
            echo "## Items without date"
            echo "${DATE_LIST}"
        fi
    fi
}

date_check() {
    # Assign variables
    threshold=$1
    today=$2
    _date=$(date -d "$3" +%s)

    # Check if the date is valid or not
    # return:
    #   1: If the date is valid
    #   0: If the date is invalid
    case $threshold in
    'future')
        if [[ "$_date" -ge "$today" ]]; then
            return 1
        fi
        ;;
    'past')
        if [[ "$_date" -le "$today" ]]; then
            return 1
        fi
        ;;
    'nodate')
        return 0
        ;;
    'date')
        return 1
        ;;
    *)
        if [[ "$threshold" -eq "$today" ]]; then
            if [[ "$_date" -eq "$today" ]]; then
                return 1
            fi
        elif [[ "$threshold" -gt "$today" ]]; then
            if [[ ( "$_date" -ge "$today" ) && ( "$_date" -le "$threshold" ) ]]; then
                return 1
            fi
        elif [[ "$threshold" -lt "$today" ]]; then
            if [[ ( "$_date" -le "$today" ) && ( "$_date" -ge "$threshold" ) ]]; then
                return 1
            fi
        fi
        ;;
    esac

    return 0
}

# == HANDLE ACTION ==
action=$( printf "%s\n" "$ACTION" | tr '[:upper:]' '[:lower:]' )
case $action in
    'help')
        usage
        ;;
    'add')
        if [ -z "$1" ]; then
            echo -n "Add: "
            read -e -r input
        else
            input=$*
        fi
        _addto "$TODO_FILE" "$input"
        ;;
    'list' | 'ls' )
        _list "$TODO_FILE" "$@"
        ;;
    'edit')
        $EDITOR "$TODO_FILE"
        ;;
    'archive' )
        # defragment blank lines
        sed -i.bak -e '/./!d' "$TODO_FILE"
        [ "$TODOTXT_VERBOSE" -gt 0 ] && grep -Pzo '(?m)((^- \[[✓X]\])( +.+\n*)+)' "$TODO_FILE" | tr -d '\0'
        # store all completed tasks and any subtasks for comparing to TODO_FILE
        grep -Pzo '(?m)((^- \[[✓X]\])( +.+\n*)+)' "$TODO_FILE" | tr -d '\0' > done.tmp
        # remaning tasks is TODO_FILE without completed tasks; order should not matter here
        comm --nocheck-order -3 "$TODO_FILE" done.tmp > todo.tmp && mv todo.tmp "$TODO_FILE"
        # archive completed tasks
        cat done.tmp >> "$DONE_FILE" && rm -f done.tmp
        if [ "$TODOTXT_VERBOSE" -gt 0 ]; then
            echo "TODO: $TODO_FILE archived."
        fi
        ;;
    'context')
        context_view "$@"
        ;;
    @(date|nodate|past|future|today|yesterday|tomorrow))
        re="^(date|nodate|future|past)$"
        if [[ ! ( "$action" =~ $re ) ]]; then
            action=$(date -d $(date -d $action +%Y-%m-%d) +%s)
        fi

        date_view "$action" "$@"
        ;;
    *)
        usage
        ;;
esac
